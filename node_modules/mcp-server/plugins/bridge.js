import axios from 'axios';
import express from 'express';
const app = express();

app.use(express.json());

// Forward POST requests from FastAPI to Context 7 MCP server
app.post('/mcp', async (req, res) => {
  try {
    const mcpResponse = await axios.post("http://localhost:4333/mcp", req.body);
    res.json(mcpResponse.data);
  } catch (error) {
    res.status(error.response?.status || 500).json({ error: error.message });
  }
});

// Example GET endpoint
app.get('/mcp', async (req, res) => {
  try {
    const mcpResponse = await axios.get("http://localhost:4333/mcp", { params: req.query });
    res.json(mcpResponse.data);
  } catch (error) {
    res.status(error.response?.status || 500).json({ error: error.message });
  }
});

const PORT = 4333;
app.get('/events', (req, res) => {
  res.set({
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive'
  });
  res.flushHeaders();

  // Example: send a message every 2 seconds
  const interval = setInterval(() => {
    res.write(`data: ${JSON.stringify({ time: new Date() })}\n\n`);
  }, 2000);

  req.on('close', () => {
    clearInterval(interval);
    res.end();
  });
});

app.listen(PORT, () => {
  console.log(`Bridge listening on port ${PORT}`);
});


// Export a 'tool' function for mcp-server plugin system
export function tool() {
  return {
    name: "bridge",
    description: "Bridge plugin for forwarding requests",
    run: () => {
      // You can add logic here if mcp-server calls this function
      return "Bridge plugin loaded";
    }
  };
}

// ...existing code...

// Forward POST requests from MCP server to FastAPI
app.post('/fastapi', async (req, res) => {
  try {
    const fastapiResponse = await axios.post("http://127.0.0.1:8000", req.body);
    res.json(fastapiResponse.data);
  } catch (error) {
    res.status(error.response?.status || 500).json({ error: error.message });
  }
});

// Forward GET requests from MCP server to FastAPI
app.get('/fastapi', async (req, res) => {
  try {
    const fastapiResponse = await axios.get("http://127.0.0.1:8000", { params: req.query });
    res.json(fastapiResponse.data);
  } catch (error) {
    res.status(error.response?.status || 500).json({ error: error.message });
  }
});

// ...existing code...